#pragma once

#include "bitstream.h"

#define INTRADC 0b1000'00
#define DQUANT 0b100'00
#define MVD 0b10'00
#define MVD24 0b1'00
#define PADDING 0x80
#define EOT 0xFF

// tables
//  huff table format is (len, val, result)
// some of the val have >8 bits but since the topmost are all 0
//  they still fit in an unsigned char...
unsigned char MCBPC_I_HUFF[][3] = {
    {1, 0b1,INTRADC | 0},
    {3, 0b001, INTRADC | 1},
    {3, 0b010, INTRADC | 2},
    {3, 0b011, INTRADC | 3},

    {4, 0b0001, INTRADC | DQUANT | 0},
    {6, 0b0000'01, INTRADC | DQUANT | 1},
    {6, 0b0000'10, INTRADC | DQUANT | 2},
    {6, 0b0000'11, INTRADC | DQUANT | 3},

    {9, 0b0000'0000'1, PADDING}, // padding

    {EOT, EOT, EOT} // terminator
};

unsigned char MCBPC_P_HUFF[][3] = {
    {1, 0b1, MVD | 0},
    {4, 0b0011, MVD | 1},
    {4, 0b0010, MVD | 2},
    {6, 0b0001'01, MVD | 3},

    {3, 0b011, DQUANT | MVD | 0},
    {7, 0b0000'111, DQUANT | MVD | 1},
    {7, 0b0000'110, DQUANT | MVD | 2},
    {9, 0b0000'0010'1, DQUANT | MVD | 3},

    {3, 0b010, MVD | MVD24 | 0},
    {7, 0b0000'101, MVD | MVD24 | 1},
    {7, 0b0000'100, MVD | MVD24 | 2},
    {8, 0b0000'0101, MVD | MVD24 | 3},

    {5, 0b0001'1, INTRADC | 0},
    {8, 0b0000'0100, INTRADC | 1},
    {8, 0b0000'0011, INTRADC | 2},
    {7, 0b0000'011, INTRADC | 3},

    {6, 0b0001'00, INTRADC | DQUANT | 0},
    {9, 0b0000'0010'0, INTRADC | DQUANT | 1},
    {9, 0b0000'0001'1, INTRADC | DQUANT | 2},
    {9, 0b0000'0001'0, INTRADC | DQUANT | 3},

    {9, 0b0000'0000'1, PADDING}, // padding

    /* these only exist for AP or Deblock mode */
    {11, 0b0000'0000'010, DQUANT | MVD | MVD24 | 0},
    {13, 0b0000'0000'0110'0, DQUANT | MVD | MVD24 | 1},
    {13, 0b0000'0000'0111'0, DQUANT | MVD | MVD24 | 2},
    {13, 0b0000'0000'0111'1, DQUANT | MVD | MVD24 | 3},

    {EOT, EOT, EOT} // terminator
};

unsigned char CBPY_HUFF[][3] = {
    {4, 0b0011, 0},
    {5, 0b0010'1, 1},
    {5, 0b0010'0, 2},
    {4, 0b1001, 3},
    {5, 0b0001'1, 4},
    {4, 0b0111, 5},
    {6, 0b0000'10, 6},
    {4, 0b1011, 7},
    {5, 0b0001'0, 8},
    {6, 0b0000'11, 9},
    {4, 0b0101, 10},
    {4, 0b1010, 11},
    {4, 0b0100, 12},
    {4, 0b1000, 13},
    {4, 0b0110, 14},
    {2, 0b11, 15},
    {EOT, EOT, EOT} // term
};

unsigned char MVD_HUFF[][3] = {
  { 13, 0b0000'0000'0010'1, 0 },
  { 13, 0b0000'0000'0011'1, 0 },
  { 12, 0b0000'0000'0101, 0 },
  { 12, 0b0000'0000'0111, 0 },
  { 12, 0b0000'0000'1001, 0 },
  { 12, 0b0000'0000'1011, 0 },
  { 12, 0b0000'0000'1101, 0 },
  { 12, 0b0000'0000'1111, 0 },
  { 11, 0b0000'0001'001, 0 },
  { 11, 0b0000'0001'011, 0 },
  { 11, 0b0000'0001'101, 0 },
  { 11, 0b0000'0001'111, 0 },
  { 11, 0b0000'0010'001, 0 },
  { 11, 0b0000'0010'011, 0 },
  { 11, 0b0000'0010'101, 0 },
  { 11, 0b0000'0010'111, 0 },
  { 11, 0b0000'0011'001, 0 },
  { 11, 0b0000'0011'011, 0 },
  { 11, 0b0000'0011'101, 0 },
  { 11, 0b0000'0011'111, 0 },
  { 11, 0b0000'0100'001, 0 },
  { 11, 0b0000'0100'011, 0 },
  { 10, 0b0000'0100'11, 0 },
  { 10, 0b0000'0101'01, 0 },
  { 10, 0b0000'0101'11, 0 },
  { 8, 0b0000'0111, 0 },
  { 8, 0b0000'1001, 0 },
  { 8, 0b0000'1011, 0 },
  { 7, 0b0000'111, 0 },
  { 5, 0b0001'1, 0 },
  { 4, 0b0011, 0 },
  { 3, 0b011, 0 },
  { 1, 0b1, 0 },
  { 3, 0b010, 0 },
  { 4, 0b0010, 0 },
  { 5, 0b0001'0, 0 },
  { 7, 0b0000'110, 0 },
  { 8, 0b0000'1010, 0 },
  { 8, 0b0000'1000, 0 },
  { 8, 0b0000'0110, 0 },
  { 10, 0b0000'0101'10, 0 },
  { 10, 0b0000'0101'00, 0 },
  { 10, 0b0000'0100'10, 0 },
  { 11, 0b0000'0100'010, 0 },
  { 11, 0b0000'0100'000, 0 },
  { 11, 0b0000'0011'110, 0 },
  { 11, 0b0000'0011'100, 0 },
  { 11, 0b0000'0011'010, 0 },
  { 11, 0b0000'0011'000, 0 },
  { 11, 0b0000'0010'110, 0 },
  { 11, 0b0000'0010'100, 0 },
  { 11, 0b0000'0010'010, 0 },
  { 11, 0b0000'0010'000, 0 },
  { 11, 0b0000'0001'110, 0 },
  { 11, 0b0000'0001'100, 0 },
  { 11, 0b0000'0001'010, 0 },
  { 11, 0b0000'0001'000, 0 },
  { 12, 0b0000'0000'1110, 0 },
  { 12, 0b0000'0000'1100, 0 },
  { 12, 0b0000'0000'1010, 0 },
  { 12, 0b0000'0000'1000, 0 },
  { 12, 0b0000'0000'0110, 0 },
  { 12, 0b0000'0000'0100, 0 },
  { 13, 0b0000'0000'0011'0, 0 },
  { EOT, EOT, EOT }
};

unsigned char TCOEF_HUFF[][3] = {
    { 2, 0b10, 0 },
    { 4, 0b1111, 0 },
    { 6, 0b0101'01, 0 },
    { 7, 0b0010'111, 0 },
    { 8, 0b0001'1111, 0 },
    { 9, 0b0001'0010'1, 0 },
    { 9, 0b0001'0010'0, 0 },
    { 10, 0b0000'1000'01, 0 },
    { 10, 0b0000'1000'00, 0 },
    { 11, 0b0000'0000'111, 0 },
    { 11, 0b0000'0000'110, 0 },
    { 11, 0b0000'0100'000, 0 },
    { 3, 0b110, 0 },
    { 6, 0b0101'00, 0 },
    { 8, 0b0001'1110, 0 },
    { 10, 0b0000'0011'11, 0 },
    { 11, 0b0000'0100'001, 0 },
    { 12, 0b0000'0101'0000, 0 },
    { 4, 0b1110, 0 },
    { 8, 0b0001'1101, 0 },
    { 10, 0b0000'0011'10, 0 },
    { 12, 0b0000'0101'0001, 0 },
    { 5, 0b0110'1, 0 },
    { 9, 0b0001'0001'1, 0 },
    { 10, 0b0000'0011'01, 0 },
    { 5, 0b0110'0, 0 },
    { 9, 0b0001'0001'0, 0 },
    { 12, 0b0000'0101'0010, 0 },
    { 5, 0b0101'1, 0 },
    { 10, 0b0000'0011'00, 0 },
    { 12, 0b0000'0101'0011, 0 },
    { 6, 0b0100'11, 0 },
    { 10, 0b0000'0010'11, 0 },
    { 12, 0b0000'0101'0100, 0 },
    { 6, 0b0100'10, 0 },
    { 10, 0b0000'0010'10, 0 },
    { 6, 0b0100'01, 0 },
    { 10, 0b0000'0010'01, 0 },
    { 6, 0b0100'00, 0 },
    { 10, 0b0000'0010'00, 0 },
    { 7, 0b0010'110, 0 },
    { 12, 0b0000'0101'0101, 0 },
    { 7, 0b0010'101, 0 },
    { 7, 0b0010'100, 0 },
    { 8, 0b0001'1100, 0 },
    { 8, 0b0001'1011, 0 },
    { 9, 0b0001'0000'1, 0 },
    { 9, 0b0001'0000'0, 0 },
    { 9, 0b0000'1111'1, 0 },
    { 9, 0b0000'1111'0, 0 },
    { 9, 0b0000'1110'1, 0 },
    { 9, 0b0000'1110'0, 0 },
    { 9, 0b0000'1101'1, 0 },
    { 9, 0b0000'1101'0, 0 },
    { 11, 0b0000'0100'010, 0 },
    { 11, 0b0000'0100'011, 0 },
    { 12, 0b0000'0101'0110, 0 },
    { 12, 0b0000'0101'0111, 0 },
    { 4, 0b0111, 1 },
    { 9, 0b0000'1100'1, 1 },
    { 11, 0b0000'0000'101, 1 },
    { 6, 0b0011'11, 1 },
    { 11, 0b0000'0000'100, 1 },
    { 6, 0b0011'10, 1 },
    { 6, 0b0011'01, 1 },
    { 6, 0b0011'00, 1 },
    { 7, 0b0010'011, 1 },
    { 7, 0b0010'010, 1 },
    { 7, 0b0010'001, 1 },
    { 7, 0b0010'000, 1 },
    { 8, 0b0001'1010, 1 },
    { 8, 0b0001'1001, 1 },
    { 8, 0b0001'1000, 1 },
    { 8, 0b0001'0111, 1 },
    { 8, 0b0001'0110, 1 },
    { 8, 0b0001'0101, 1 },
    { 8, 0b0001'0100, 1 },
    { 8, 0b0001'0011, 1 },
    { 9, 0b0000'1100'0, 1 },
    { 9, 0b0000'1011'1, 1 },
    { 9, 0b0000'1011'0, 1 },
    { 9, 0b0000'1010'1, 1 },
    { 9, 0b0000'1010'0, 1 },
    { 9, 0b0000'1001'1, 1 },
    { 9, 0b0000'1001'0, 1 },
    { 9, 0b0000'1000'1, 1 },
    { 10, 0b0000'0001'11, 1 },
    { 10, 0b0000'0001'10, 1 },
    { 10, 0b0000'0001'01, 1 },
    { 10, 0b0000'0001'00, 1 },
    { 11, 0b0000'0100'100, 1 },
    { 11, 0b0000'0100'101, 1 },
    { 11, 0b0000'0100'110, 1 },
    { 11, 0b0000'0100'111, 1 },
    { 12, 0b0000'0101'1000, 1 },
    { 12, 0b0000'0101'1001, 1 },
    { 12, 0b0000'0101'1010, 1 },
    { 12, 0b0000'0101'1011, 1 },
    { 12, 0b0000'0101'1100, 1 },
    { 12, 0b0000'0101'1101, 1 },
    { 12, 0b0000'0101'1110, 1 },
    { 12, 0b0000'0101'1111, 1 },
    { 7, 0b0000'011, 2 },
    { EOT, EOT, EOT } // term
};

// hufftbl lookup + bit copy
static int huff_lookup(struct bitstream* in, struct bitstream* out, unsigned char tbl[][3])
{
    int done = 0;
    int len = 0;
    int val = 0;
    while (!done) {
        // read another bit
        val = (val << 1) | copy_bit(in, out);
        len++;

        // check table for match on len and val
        int i = 0;
        done = 1;
        while (tbl[i][0] != EOT) {
            if (len == tbl[i][0] && val == tbl[i][1]) {
                //                printf("huff_lookup: bits=%d val=%d idx=%i\n", len, val, i);
                return tbl[i][2];
            }
            if (len < tbl[i][0]) done = 0;
                      i++;
        }
    }
    printf("htbl lookup failed! val=%d, len=%d, pos=%d mask=%02x\n", val, len, ftell(in->fp) - 1, in->mask);
    //    fprintf(stderr, "hufftbl lookup failed! val=%d, len=%d\n", val, len);
    return -1;
}